[
    {
        "id": "dbab6edfda7971c1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39bab5e26253c8ec",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "GET Countries",
        "style": {
            "label": true
        },
        "nodes": [
            "892d19e13d561664",
            "59cddae29935302b",
            "3fa02e6179b373a7",
            "7798693f4d1c5ad7",
            "fab558f57eee55da",
            "5c48384cd53ed955"
        ],
        "x": 934,
        "y": 19,
        "w": 1012,
        "h": 122
    },
    {
        "id": "5e64576d309c62f9",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "GET Organizations",
        "style": {
            "label": true,
            "stroke": "#dbcbe7",
            "fill": "#9363b7",
            "color": "#000000"
        },
        "nodes": [
            "e17212fe24b99c7d",
            "98c7524b6625525b",
            "10fe39b43b926ffa",
            "5ccdd48129b1bb9b",
            "4850bfe9234cfc08",
            "fb2c076c83639249"
        ],
        "x": 74,
        "y": 259,
        "w": 1052,
        "h": 142
    },
    {
        "id": "14a048fb108bd56c",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Error management",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "label-position": "n",
            "color": "#ffffff"
        },
        "nodes": [
            "7e9f1c02.7f6d4",
            "4b4b8c6c.7a4644",
            "6d5f7d78.22c164",
            "35edc91d.7b924e",
            "5d2c72d4.7c8dec",
            "3c2ec599cb5c2c3e"
        ],
        "x": 94,
        "y": 19,
        "w": 732,
        "h": 202
    },
    {
        "id": "aad75d5c826ca0b1",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "List Members",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f45c59e0.16d8c",
            "cbf657c0.fdae98",
            "c2f7fbb0.89f8a8",
            "9e9d7e60.87b97",
            "a1f8c1b0.8a3f9",
            "d4d62d83d3a983e7"
        ],
        "x": 64,
        "y": 579,
        "w": 1062,
        "h": 162
    },
    {
        "id": "ba352a33ad13b2d1",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Create Members",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6d7427d7f4446999",
            "92b39ec92961af98",
            "22db6159d7c74659",
            "a5b57367463c4ecf",
            "e4a8ee9f08e8c364",
            "2b7eed18ecbca6f1",
            "54387abb3b891c74"
        ],
        "x": 74,
        "y": 759,
        "w": 1152,
        "h": 142
    },
    {
        "id": "2d9b645b715b3674",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Get Member Info",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4e6ae77d45269344",
            "541012e863a8c76e",
            "a23c829360ae74a5",
            "fe0cb3ef10d094be",
            "f586c686d6c6d459",
            "41226e2964bced0c",
            "82295bac7cc91747"
        ],
        "x": 74,
        "y": 919,
        "w": 1242,
        "h": 162
    },
    {
        "id": "cf1453eb80b45c35",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "DB_HOST",
        "hostFieldType": "env",
        "port": "DB_PORT",
        "portFieldType": "env",
        "database": "DB_NAME",
        "databaseFieldType": "env",
        "ssl": "{\"require\":true,\"rejectUnauthorized\":false}",
        "sslFieldType": "json",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "DB_USER",
        "userFieldType": "env",
        "password": "DB_PASSWORD",
        "passwordFieldType": "env"
    },
    {
        "id": "892d19e13d561664",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1410,
        "y": 80,
        "wires": [
            [
                "7798693f4d1c5ad7"
            ]
        ]
    },
    {
        "id": "59cddae29935302b",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "GET Countries",
        "url": "/countries",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "3fa02e6179b373a7"
            ]
        ]
    },
    {
        "id": "e17212fe24b99c7d",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "5ccdd48129b1bb9b"
            ]
        ]
    },
    {
        "id": "98c7524b6625525b",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "List Organizations",
        "url": "/organizations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "fb2c076c83639249"
            ]
        ]
    },
    {
        "id": "10fe39b43b926ffa",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "200 OK",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 360,
        "wires": []
    },
    {
        "id": "a1f8c1b0.8a3f9",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "List Members",
        "url": "/members",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "9e9d7e60.87b97"
            ]
        ]
    },
    {
        "id": "9e9d7e60.87b97",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "Prepare SQL Query",
        "func": "msg.query = \"SELECT * FROM members LIMIT 50\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 660,
        "wires": [
            [
                "d4d62d83d3a983e7"
            ]
        ]
    },
    {
        "id": "cbf657c0.fdae98",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 660,
        "wires": [
            [
                "c2f7fbb0.89f8a8"
            ],
            [
                "f45c59e0.16d8c"
            ]
        ]
    },
    {
        "id": "c2f7fbb0.89f8a8",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "f45c59e0.16d8c",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1020,
        "y": 700,
        "wires": []
    },
    {
        "id": "7e9f1c02.7f6d4",
        "type": "catch",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "4b4b8c6c.7a4644",
                "3c2ec599cb5c2c3e"
            ]
        ]
    },
    {
        "id": "4b4b8c6c.7a4644",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "Check Error Type",
        "property": "error.source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "postgresql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "6d5f7d78.22c164"
            ],
            [
                "35edc91d.7b924e"
            ],
            [
                "5d2c72d4.7c8dec"
            ]
        ]
    },
    {
        "id": "6d5f7d78.22c164",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "35edc91d.7b924e",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "500 Internal Server Error",
        "statusCode": "500",
        "headers": {},
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d2c72d4.7c8dec",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "403 Forbidden",
        "statusCode": "403",
        "headers": {},
        "x": 690,
        "y": 180,
        "wires": []
    },
    {
        "id": "5ccdd48129b1bb9b",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 340,
        "wires": [
            [
                "4850bfe9234cfc08"
            ],
            [
                "10fe39b43b926ffa"
            ]
        ]
    },
    {
        "id": "4850bfe9234cfc08",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1020,
        "y": 300,
        "wires": []
    },
    {
        "id": "fb2c076c83639249",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "Prepare SQL Query",
        "func": "msg.query = \"SELECT * FROM organizations\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "e17212fe24b99c7d"
            ]
        ]
    },
    {
        "id": "3fa02e6179b373a7",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "Prepare SQL Query",
        "func": "msg.query = \"SELECT * FROM countries;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "892d19e13d561664"
            ]
        ]
    },
    {
        "id": "7798693f4d1c5ad7",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1600,
        "y": 80,
        "wires": [
            [
                "fab558f57eee55da"
            ],
            [
                "5c48384cd53ed955"
            ]
        ]
    },
    {
        "id": "fab558f57eee55da",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1840,
        "y": 60,
        "wires": []
    },
    {
        "id": "5c48384cd53ed955",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1840,
        "y": 100,
        "wires": []
    },
    {
        "id": "6d7427d7f4446999",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Create Member",
        "url": "/members",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "92b39ec92961af98"
            ]
        ]
    },
    {
        "id": "92b39ec92961af98",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Prepare SQL Insert",
        "func": "const { \n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture, \n    member_languages, \n    member_summary, \n    country_id, \n    member_password, \n    skill_id \n} = msg.payload;\n\n// Validation\nif (!member_firstname || typeof member_firstname !== 'string' || member_firstname.trim() === '') {\n    node.error('Missing or invalid member_firstname', msg);\n    return null;\n}\n\nif (!member_lastname || typeof member_lastname !== 'string' || member_lastname.trim() === '') {\n    node.error('Missing or invalid member_lastname', msg);\n    return null;\n}\n\nif (!member_email || typeof member_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member_email)) {\n    node.error('Missing or invalid member_email', msg);\n    return null;\n}\n\nif (!member_password || typeof member_password !== 'string' || member_password.trim() === '') {\n    node.error('Missing or invalid member_password', msg);\n    return null;\n}\n\n\n// Convert member_languages array to PostgreSQL array literal format\nconst formatted_languages = `{${member_languages.join(',')}}`;\n\n// Prepare SQL\nmsg.query = `\n    INSERT INTO members (\n        member_firstname, member_lastname, member_email, member_picture, \n        member_languages, member_summary, country_id, \n        member_password, member_status, skill_id\n    ) \n    VALUES (\n        $1, $2, $3, $4, \n        $5, $6, $7, $8, \n        $9, $10\n    ) \n    RETURNING *;\n`;\n\nmsg.params = [\n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture || null, \n    formatted_languages, \n    member_summary, \n    country_id || null, \n    member_password, \n    \"new\", \n    skill_id || null\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 820,
        "wires": [
            [
                "22db6159d7c74659"
            ]
        ]
    },
    {
        "id": "a5b57367463c4ecf",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 820,
        "wires": [
            [
                "54387abb3b891c74"
            ],
            [
                "2b7eed18ecbca6f1"
            ]
        ]
    },
    {
        "id": "e4a8ee9f08e8c364",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "201 Created",
        "statusCode": "201",
        "headers": {},
        "x": 1130,
        "y": 800,
        "wires": []
    },
    {
        "id": "2b7eed18ecbca6f1",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1080,
        "y": 860,
        "wires": []
    },
    {
        "id": "3c2ec599cb5c2c3e",
        "type": "debug",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 160,
        "wires": []
    },
    {
        "id": "d4d62d83d3a983e7",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "cbf657c0.fdae98"
            ]
        ]
    },
    {
        "id": "22db6159d7c74659",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 820,
        "wires": [
            [
                "a5b57367463c4ecf"
            ]
        ]
    },
    {
        "id": "54387abb3b891c74",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "resp",
        "func": "// Extract the member ID from the database query result\nconst createdMember = msg.payload[0]; // Assuming the result is in the first element of the array\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member has been successfully created\",\n    member_id: createdMember.member_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 800,
        "wires": [
            [
                "e4a8ee9f08e8c364"
            ]
        ]
    },
    {
        "id": "82295bac7cc91747",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Get Member by ID",
        "url": "/members/:member_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "4e6ae77d45269344"
            ]
        ]
    },
    {
        "id": "4e6ae77d45269344",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Prepare SQL Query",
        "func": "const member_id = msg.req.params.member_id;\n\n// Prepare SQL to get the member without the password\nmsg.query = `\n    SELECT \n        member_id, \n        member_firstname, \n        member_lastname, \n        member_email, \n        member_picture, \n        member_languages, \n        member_summary, \n        team_id, \n        country_id, \n        member_status, \n        member_level, \n        member_credit, \n        member_xp, \n        skill_id, \n        creation_date\n    FROM \n        members\n    WHERE \n        member_id = $1\n`;\n\nmsg.params = [member_id];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "41226e2964bced0c"
            ]
        ]
    },
    {
        "id": "541012e863a8c76e",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1000,
        "wires": [
            [
                "a23c829360ae74a5"
            ],
            [
                "fe0cb3ef10d094be"
            ]
        ]
    },
    {
        "id": "a23c829360ae74a5",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst member = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member found\",\n    member: member\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "f586c686d6c6d459"
            ]
        ]
    },
    {
        "id": "fe0cb3ef10d094be",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1090,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f586c686d6c6d459",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1230,
        "y": 960,
        "wires": []
    },
    {
        "id": "41226e2964bced0c",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "541012e863a8c76e"
            ]
        ]
    }
]