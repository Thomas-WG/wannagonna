[
    {
        "id": "dbab6edfda7971c1",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "803db7b38fcbf7c9",
        "type": "subflow",
        "name": "Verify JWT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "35fb4ffbd20b0ed1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 60,
                "wires": [
                    {
                        "id": "35fb4ffbd20b0ed1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "147c3624ebe2d286",
        "type": "subflow",
        "name": "Check npo Role",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "a97b472b2c19fb8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 40,
                "wires": [
                    {
                        "id": "a97b472b2c19fb8e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "880ae79f14619c5d",
        "type": "subflow",
        "name": "Check admin Role",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e85a591d55583266"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 40,
                "wires": [
                    {
                        "id": "e85a591d55583266",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "84b08c8e5dbc93fb",
        "type": "subflow",
        "name": "Check Member Role",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f8ea6c2a09142886"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 60,
                "wires": [
                    {
                        "id": "f8ea6c2a09142886",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "230b6c6a6e6632b6",
        "type": "subflow",
        "name": "Check ambassador role",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "9f42231760e0e299"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 60,
                "wires": [
                    {
                        "id": "9f42231760e0e299",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "39bab5e26253c8ec",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "GET Countries",
        "style": {
            "label": true
        },
        "nodes": [
            "892d19e13d561664",
            "59cddae29935302b",
            "3fa02e6179b373a7",
            "7798693f4d1c5ad7",
            "fab558f57eee55da",
            "5c48384cd53ed955"
        ],
        "x": 934,
        "y": 19,
        "w": 1012,
        "h": 122
    },
    {
        "id": "5e64576d309c62f9",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "List Organizations",
        "style": {
            "label": true,
            "stroke": "#9363b7",
            "fill": "#dbcbe7",
            "color": "#000000"
        },
        "nodes": [
            "e17212fe24b99c7d",
            "98c7524b6625525b",
            "10fe39b43b926ffa",
            "5ccdd48129b1bb9b",
            "4850bfe9234cfc08",
            "fb2c076c83639249",
            "1c03ca4d05a7267c",
            "e338455bad8a47c6"
        ],
        "x": 54,
        "y": 259,
        "w": 1252,
        "h": 142
    },
    {
        "id": "14a048fb108bd56c",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Error management",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "label-position": "n",
            "color": "#ffffff"
        },
        "nodes": [
            "7e9f1c02.7f6d4",
            "4b4b8c6c.7a4644",
            "6d5f7d78.22c164",
            "35edc91d.7b924e",
            "5d2c72d4.7c8dec",
            "3c2ec599cb5c2c3e",
            "4f932c4991bce055",
            "81c7faff4cb614fd"
        ],
        "x": 94,
        "y": -1,
        "w": 832,
        "h": 242
    },
    {
        "id": "aad75d5c826ca0b1",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "List Members",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f45c59e0.16d8c",
            "cbf657c0.fdae98",
            "c2f7fbb0.89f8a8",
            "9e9d7e60.87b97",
            "a1f8c1b0.8a3f9",
            "d4d62d83d3a983e7",
            "a44c078fe6fa21d3",
            "083f6f43ae863331"
        ],
        "x": 84,
        "y": 759,
        "w": 1222,
        "h": 162
    },
    {
        "id": "ba352a33ad13b2d1",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Create Members",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6d7427d7f4446999",
            "92b39ec92961af98",
            "22db6159d7c74659",
            "a5b57367463c4ecf",
            "e4a8ee9f08e8c364",
            "2b7eed18ecbca6f1",
            "54387abb3b891c74",
            "7a611a120c3cf5a7",
            "d56cb3323c3a56e5",
            "67478bbf2dddb2b7",
            "56b0520943f83b20",
            "a8d159671889b121",
            "3b321b9933e736a3",
            "1bc22e46e42f09f4",
            "a6b4245d22ee9cef",
            "4b96dbd38e612725",
            "831acb19d938a2b4",
            "20b0454a4cd033d6",
            "1f53358b748a2053"
        ],
        "x": 74,
        "y": 959,
        "w": 2372,
        "h": 162
    },
    {
        "id": "2d9b645b715b3674",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Get Member Info - Public",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4e6ae77d45269344",
            "541012e863a8c76e",
            "a23c829360ae74a5",
            "fe0cb3ef10d094be",
            "f586c686d6c6d459",
            "41226e2964bced0c",
            "82295bac7cc91747",
            "4ffb7cc971eb13e8"
        ],
        "x": 74,
        "y": 1139,
        "w": 1242,
        "h": 162
    },
    {
        "id": "383b1f1fa33c8505",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Create Organizations",
        "style": {
            "stroke": "#9363b7",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "85eb02be4a9401ad",
            "63739fed659fe368",
            "76cd51faaace4d2a",
            "4cbff012b0a8503e",
            "b15896363a42e71b",
            "5f67325b39410bc6",
            "cee2b67c7a1b2eb8",
            "5daa9143b83d6644",
            "6954bcca671f3ab5"
        ],
        "x": 54,
        "y": 599,
        "w": 1352,
        "h": 142
    },
    {
        "id": "05b8ed53065a8cd1",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Get Organization Info",
        "style": {
            "stroke": "#9363b7",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "aeaf33e6aaa4f214",
            "cd60ed703e819022",
            "213939d54a3fc324",
            "9b103e3f30e49e8d",
            "eacd64c8e4844be5",
            "2e0619425460a3d3",
            "4fa2ca320785a2e4",
            "abfcdd74d9498979"
        ],
        "x": 54,
        "y": 419,
        "w": 1242,
        "h": 162
    },
    {
        "id": "2b91f5927dfc193f",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "List Activities",
        "style": {
            "stroke": "#addb7b",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5a7ada1f4c09f766",
            "b374cb0fea6b3897",
            "c2478e40eca32f8d",
            "0ca2e856aba81c1d",
            "a507e8ae8429cd78",
            "aef9c751fd89b4db",
            "06527b6a60f2adfb",
            "35083f92f80d197f"
        ],
        "x": 84,
        "y": 1739,
        "w": 1282,
        "h": 162
    },
    {
        "id": "4e3f58172aca87d0",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Create Activity",
        "style": {
            "stroke": "#addb7b",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "238b583f038c7769",
            "f5b74102881341fa",
            "307e56627f59548e",
            "bf2f9e68553ccb75",
            "ed2d2dc8c080fab8",
            "18a014b66159eb6f",
            "bc531713bb82c1d0",
            "773d749297e54a80",
            "2c1a6fd5171b3b59"
        ],
        "x": 94,
        "y": 1919,
        "w": 1292,
        "h": 142
    },
    {
        "id": "aefbdd2e49c81e3f",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Get Activity Info",
        "style": {
            "stroke": "#addb7b",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b019c1b471ba4625",
            "1b1493fa8a5b9912",
            "45582769dbee1f97",
            "98680c88a7e3bbb2",
            "85a14efd439eb0a3",
            "36a435dd5284487f",
            "aac726b02e5b233f",
            "3ec8d3f7f2a966a4",
            "31ab2ada5a324f3a"
        ],
        "x": 94,
        "y": 2079,
        "w": 1392,
        "h": 162
    },
    {
        "id": "ed79720e50c3c5aa",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1",
            "2",
            "4",
            "6",
            "7",
            "91763faa8f876344",
            "f59ee31030a28138"
        ],
        "x": 1334,
        "y": 199,
        "w": 952,
        "h": 82
    },
    {
        "id": "0c3cf55a6354c68b",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Get Member Info - Private",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a18fada39e5856bb",
            "809a00406fc68fd0",
            "a69fa02be399df48",
            "12f0731055ed70ce",
            "dd90a9d2d460e1d5",
            "6e6299c02a5c9fa9",
            "6f49aed723f6683e",
            "a64c0842ee32a3f8",
            "3dbce8cf909fc75b",
            "0641024d2baa6972"
        ],
        "x": 74,
        "y": 1319,
        "w": 1242,
        "h": 162
    },
    {
        "id": "5a0547259b4b944c",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Apply to Activity",
        "style": {
            "stroke": "#addb7b",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3b3e9dc44a7c6a77",
            "0b4c5f339010e936",
            "03095899b605f037",
            "399ae07379df565f",
            "cfee23617ff5e557",
            "22fd5f8992199711",
            "e2460e7e0c4be608",
            "e5734a3238d892fb",
            "eb9feefa75040452"
        ],
        "x": 94,
        "y": 2259,
        "w": 1392,
        "h": 162
    },
    {
        "id": "083ef5064dfa9c6f",
        "type": "group",
        "z": "dbab6edfda7971c1",
        "name": "Update Member",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6b0c9df1c7ee1dce",
            "8110795bc64320e3",
            "694b2e4518918768",
            "1d4824f0f1daec6c",
            "633962cfc38dfcc8",
            "20d5cd7713e05a40",
            "1c841b9718cfb1a3",
            "af94c79376d8504f",
            "3fedc1bd3a0da237",
            "7fe4a3b20b4c9f24",
            "9c73712dd6014031",
            "87e3519ad243592b",
            "367d7037f8f7e71d",
            "9813d77d28293b73"
        ],
        "x": 74,
        "y": 1539,
        "w": 1712,
        "h": 142
    },
    {
        "id": "cf1453eb80b45c35",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "DB_HOST",
        "hostFieldType": "env",
        "port": "DB_PORT",
        "portFieldType": "env",
        "database": "DB_NAME",
        "databaseFieldType": "env",
        "ssl": "{\"require\":true,\"rejectUnauthorized\":false}",
        "sslFieldType": "json",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "DB_USER",
        "userFieldType": "env",
        "password": "DB_PASSWORD",
        "passwordFieldType": "env"
    },
    {
        "id": "35fb4ffbd20b0ed1",
        "type": "function",
        "z": "803db7b38fcbf7c9",
        "name": "Verify JWT",
        "func": "const jwt = global.get('jsonwebtoken');\n\nconst token = msg.req.headers.authorization.split(' ')[1];\n\ntry {\n    const decoded = jwt.verify(token, 'your-secret-key');\n    msg.user = decoded;\n    console.log(decoded);\n    return [msg, null];\n} catch (err) {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Invalid or expired token.' };\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [],
            [
                "a919bd79238eef76"
            ]
        ]
    },
    {
        "id": "a919bd79238eef76",
        "type": "http response",
        "z": "803db7b38fcbf7c9",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "1491efa5dc2fb8df",
        "type": "http response",
        "z": "147c3624ebe2d286",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "a97b472b2c19fb8e",
        "type": "function",
        "z": "147c3624ebe2d286",
        "name": "Check NPO Role",
        "func": "if (msg.user.role !== 'npo') {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Only members with \"npo\" role can create activities.' };\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [],
            [
                "1491efa5dc2fb8df"
            ]
        ]
    },
    {
        "id": "433bc35d7abae6e0",
        "type": "http response",
        "z": "880ae79f14619c5d",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 390,
        "y": 100,
        "wires": []
    },
    {
        "id": "e85a591d55583266",
        "type": "function",
        "z": "880ae79f14619c5d",
        "name": "Check admin Role",
        "func": "if (msg.user.role !== 'admin') {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Only members with admin role can perform this action.' };\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [],
            [
                "433bc35d7abae6e0"
            ]
        ]
    },
    {
        "id": "3e77f02a470c8f38",
        "type": "http response",
        "z": "84b08c8e5dbc93fb",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 120,
        "wires": []
    },
    {
        "id": "f8ea6c2a09142886",
        "type": "function",
        "z": "84b08c8e5dbc93fb",
        "name": "Check member Role",
        "func": "\nconst hasMember = msg.user.role.some(role => role.role_name === 'member');\n\nif (!hasMember) {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Only members can perform this action.' };\n    return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 60,
        "wires": [
            [],
            [
                "3e77f02a470c8f38"
            ]
        ]
    },
    {
        "id": "a7e14c166c419a9f",
        "type": "http response",
        "z": "230b6c6a6e6632b6",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 120,
        "wires": []
    },
    {
        "id": "9f42231760e0e299",
        "type": "function",
        "z": "230b6c6a6e6632b6",
        "name": "Check ambassador Role",
        "func": "if (msg.user.role !== 'ambassador') {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Only members with \"ambassador\" role can perform this action.' };\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 60,
        "wires": [
            [],
            [
                "a7e14c166c419a9f"
            ]
        ]
    },
    {
        "id": "892d19e13d561664",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1410,
        "y": 80,
        "wires": [
            [
                "7798693f4d1c5ad7"
            ]
        ]
    },
    {
        "id": "59cddae29935302b",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "GET Countries",
        "url": "/countries",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "3fa02e6179b373a7"
            ]
        ]
    },
    {
        "id": "e17212fe24b99c7d",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 865,
        "y": 340,
        "wires": [
            [
                "5ccdd48129b1bb9b"
            ]
        ],
        "l": false
    },
    {
        "id": "98c7524b6625525b",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "List Organizations",
        "url": "/organizations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "1c03ca4d05a7267c"
            ]
        ]
    },
    {
        "id": "10fe39b43b926ffa",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "200 OK",
        "statusCode": "",
        "headers": {},
        "x": 1180,
        "y": 360,
        "wires": []
    },
    {
        "id": "a1f8c1b0.8a3f9",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "List Members",
        "url": "/members",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 840,
        "wires": [
            [
                "a44c078fe6fa21d3"
            ]
        ]
    },
    {
        "id": "9e9d7e60.87b97",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "Prepare SQL Query",
        "func": "// Extract query parameters\nconst skip = parseInt(msg.req.query.skip) || 0;  // Default to 0 if not provided\nconst limit = parseInt(msg.req.query.limit) || 50;  // Default to 50 if not provided\n\n// Validate skip and limit\nif (isNaN(skip) || skip < 0) {\n    node.error('Invalid skip parameter', msg);\n    return null;\n}\n\nif (isNaN(limit) || limit <= 0) {\n    node.error('Invalid limit parameter', msg);\n    return null;\n}\nmsg.query = `SELECT \n        member_id, \n        member_firstname, \n        member_lastname, \n        member_picture, \n        member_languages, \n        member_summary, \n        country_id, \n        member_status, \n        member_level, \n        skill_id, \n        creation_date\n        FROM members \n        LIMIT $1 \n        OFFSET $2`;\nmsg.params = [\n    limit,\n    skip\n];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "d4d62d83d3a983e7"
            ]
        ]
    },
    {
        "id": "cbf657c0.fdae98",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "c2f7fbb0.89f8a8"
            ],
            [
                "f45c59e0.16d8c"
            ]
        ]
    },
    {
        "id": "c2f7fbb0.89f8a8",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1200,
        "y": 800,
        "wires": []
    },
    {
        "id": "f45c59e0.16d8c",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 880,
        "wires": []
    },
    {
        "id": "7e9f1c02.7f6d4",
        "type": "catch",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "4b4b8c6c.7a4644",
                "3c2ec599cb5c2c3e"
            ]
        ]
    },
    {
        "id": "4b4b8c6c.7a4644",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "Check Error Type",
        "property": "error.source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "postgresql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 120,
        "wires": [
            [
                "6d5f7d78.22c164"
            ],
            [
                "35edc91d.7b924e"
            ],
            [
                "81c7faff4cb614fd"
            ]
        ]
    },
    {
        "id": "6d5f7d78.22c164",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 690,
        "y": 40,
        "wires": []
    },
    {
        "id": "35edc91d.7b924e",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "500 Internal Server Error",
        "statusCode": "500",
        "headers": {},
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d2c72d4.7c8dec",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "403 Forbidden",
        "statusCode": "403",
        "headers": {},
        "x": 800,
        "y": 200,
        "wires": []
    },
    {
        "id": "5ccdd48129b1bb9b",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "4850bfe9234cfc08"
            ],
            [
                "10fe39b43b926ffa"
            ]
        ]
    },
    {
        "id": "4850bfe9234cfc08",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "fb2c076c83639249",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "Prepare SQL Query",
        "func": "// Extract query parameters\nconst skip = parseInt(msg.req.query.skip) || 0;  // Default to 0 if not provided\nconst limit = parseInt(msg.req.query.limit) || 50;  // Default to 50 if not provided\n\n// Validate skip and limit\nif (isNaN(skip) || skip < 0) {\n    node.error('Invalid skip parameter', msg);\n    return null;\n}\n\nif (isNaN(limit) || limit <= 0) {\n    node.error('Invalid limit parameter', msg);\n    return null;\n}\nmsg.query = \"SELECT org_name, org_id FROM organizations LIMIT $1 OFFSET $2\";\nmsg.params = [\n    limit,\n    skip\n];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "e17212fe24b99c7d"
            ]
        ]
    },
    {
        "id": "3fa02e6179b373a7",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "Prepare SQL Query",
        "func": "msg.query = \"SELECT * FROM countries;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "892d19e13d561664"
            ]
        ]
    },
    {
        "id": "7798693f4d1c5ad7",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1600,
        "y": 80,
        "wires": [
            [
                "fab558f57eee55da"
            ],
            [
                "5c48384cd53ed955"
            ]
        ]
    },
    {
        "id": "fab558f57eee55da",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1840,
        "y": 60,
        "wires": []
    },
    {
        "id": "5c48384cd53ed955",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "39bab5e26253c8ec",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1840,
        "y": 100,
        "wires": []
    },
    {
        "id": "6d7427d7f4446999",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Create Member",
        "url": "/members",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "67478bbf2dddb2b7"
            ]
        ]
    },
    {
        "id": "92b39ec92961af98",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "PSQL Insert Member",
        "func": "const { \n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture, \n    member_languages, \n    member_summary, \n    country_id, \n    member_password, \n    skill_id \n} = msg.newmember;\n\n// Validation\nif (!member_firstname || typeof member_firstname !== 'string' || member_firstname.trim() === '') {\n    node.error('Missing or invalid member_firstname', msg);\n    return null;\n}\n\nif (!member_lastname || typeof member_lastname !== 'string' || member_lastname.trim() === '') {\n    node.error('Missing or invalid member_lastname', msg);\n    return null;\n}\n\nif (!member_email || typeof member_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member_email)) {\n    node.error('Missing or invalid member_email', msg);\n    return null;\n}\n\nif (!member_password || typeof member_password !== 'string' || member_password.trim() === '') {\n    node.error('Missing or invalid member_password', msg);\n    return null;\n}\n\n\n// Convert member_languages array to PostgreSQL array literal format\nconst formatted_languages = `{${member_languages.join(',')}}`;\n\n// Prepare SQL\nmsg.query = `\n    INSERT INTO members (\n        member_firstname, member_lastname, member_email, member_picture, \n        member_languages, member_summary, country_id, \n        member_password, member_status, skill_id\n    ) \n    VALUES (\n        $1, $2, $3, $4, \n        $5, $6, $7, $8, \n        $9, $10\n    ) \n    RETURNING *;\n`;\n\nmsg.params = [\n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture || null, \n    formatted_languages, \n    member_summary, \n    country_id || null, \n    member_password, \n    \"new\", \n    skill_id || null\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "22db6159d7c74659"
            ]
        ]
    },
    {
        "id": "a5b57367463c4ecf",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2030,
        "y": 1020,
        "wires": [
            [
                "54387abb3b891c74"
            ],
            [
                "2b7eed18ecbca6f1"
            ]
        ]
    },
    {
        "id": "e4a8ee9f08e8c364",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "201 Created",
        "statusCode": "201",
        "headers": {},
        "x": 2350,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2b7eed18ecbca6f1",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 2260,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3c2ec599cb5c2c3e",
        "type": "debug",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 180,
        "wires": []
    },
    {
        "id": "d4d62d83d3a983e7",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 865,
        "y": 840,
        "wires": [
            [
                "cbf657c0.fdae98"
            ]
        ],
        "l": false
    },
    {
        "id": "22db6159d7c74659",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 855,
        "y": 1040,
        "wires": [
            [
                "a6b4245d22ee9cef"
            ]
        ],
        "l": false
    },
    {
        "id": "54387abb3b891c74",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "resp",
        "func": "// Extract the member ID from the database query result\nconst createdMember = msg.payload[0]; // Assuming the result is in the first element of the array\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member has been successfully created\",\n    member_id: createdMember.member_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1000,
        "wires": [
            [
                "e4a8ee9f08e8c364"
            ]
        ]
    },
    {
        "id": "82295bac7cc91747",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Get Member by ID",
        "url": "/members/public/:member_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1220,
        "wires": [
            [
                "4ffb7cc971eb13e8"
            ]
        ]
    },
    {
        "id": "4e6ae77d45269344",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Prepare SQL Query",
        "func": "const member_id = msg.req.params.member_id;\n\n// Prepare SQL to get the member without the password\nmsg.query = `\n    SELECT \n        member_id, \n        member_firstname, \n        member_lastname, \n        member_picture, \n        member_languages, \n        member_summary, \n        team_id, \n        country_id, \n        member_status, \n        member_level, \n        skill_id, \n        creation_date\n    FROM \n        members\n    WHERE \n        member_id = $1\n`;\n\nmsg.params = [member_id];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "41226e2964bced0c"
            ]
        ]
    },
    {
        "id": "541012e863a8c76e",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "a23c829360ae74a5"
            ],
            [
                "fe0cb3ef10d094be"
            ]
        ]
    },
    {
        "id": "a23c829360ae74a5",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst member = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member found\",\n    member: member\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1180,
        "wires": [
            [
                "f586c686d6c6d459"
            ]
        ]
    },
    {
        "id": "fe0cb3ef10d094be",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1090,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f586c686d6c6d459",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1230,
        "y": 1180,
        "wires": []
    },
    {
        "id": "41226e2964bced0c",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 695,
        "y": 1220,
        "wires": [
            [
                "541012e863a8c76e"
            ]
        ],
        "l": false
    },
    {
        "id": "85eb02be4a9401ad",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "Create Organization",
        "url": "/organizations",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "5daa9143b83d6644"
            ]
        ]
    },
    {
        "id": "63739fed659fe368",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "Prepare SQL Insert",
        "func": "const { \n    org_name, \n    org_email, \n    org_picture, \n    org_languages, \n    org_summary, \n    country_id \n} = msg.payload;\n\n// Validation\nif (!org_name || typeof org_name !== 'string' || org_name.trim() === '') {\n    node.error('Missing or invalid org_name', msg);\n    return null;\n}\n\nif (!org_email || typeof org_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(org_email)) {\n    node.error('Missing or invalid org_email', msg);\n    return null;\n}\n\n\n\n// Convert org_languages array to PostgreSQL array literal format\nconst formatted_languages = `{${org_languages.join(',')}}`;\n\n// Prepare SQL\nmsg.query = `\n    INSERT INTO organizations (\n        org_name, org_email, org_picture, \n        org_languages, org_summary, country_id\n    ) \n    VALUES (\n        $1, $2, $3, \n        $4, $5, $6\n    ) \n    RETURNING *;\n`;\n\nmsg.params = [\n    org_name, \n    org_email, \n    org_picture, \n    formatted_languages, \n    org_summary, \n    country_id || null\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "cee2b67c7a1b2eb8"
            ]
        ]
    },
    {
        "id": "76cd51faaace4d2a",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 680,
        "wires": [
            [
                "4cbff012b0a8503e"
            ],
            [
                "b15896363a42e71b"
            ]
        ]
    },
    {
        "id": "4cbff012b0a8503e",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "Create Response",
        "func": "// Extract the organization ID from the query result\nconst createdOrg = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Organization has been successfully created\",\n    org_id: createdOrg.org_id\n};\n\n// Set the response status code\nmsg.statusCode = 201;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "5f67325b39410bc6"
            ]
        ]
    },
    {
        "id": "b15896363a42e71b",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1210,
        "y": 700,
        "wires": []
    },
    {
        "id": "5f67325b39410bc6",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "201 Created",
        "statusCode": "201",
        "headers": {},
        "x": 1310,
        "y": 640,
        "wires": []
    },
    {
        "id": "cee2b67c7a1b2eb8",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 845,
        "y": 660,
        "wires": [
            [
                "76cd51faaace4d2a"
            ]
        ],
        "l": false
    },
    {
        "id": "aeaf33e6aaa4f214",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "Prepare SQL Query",
        "func": "const org_id = msg.req.params.org_id;\n\n// Prepare SQL to get the member without the password\nmsg.query = `\n    SELECT \n        *\n    FROM \n        organizations\n    WHERE \n        org_id = $1\n`;\n\nmsg.params = [org_id];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "2e0619425460a3d3"
            ]
        ]
    },
    {
        "id": "cd60ed703e819022",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 500,
        "wires": [
            [
                "213939d54a3fc324"
            ],
            [
                "9b103e3f30e49e8d"
            ]
        ]
    },
    {
        "id": "213939d54a3fc324",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst organization = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Organization found\",\n    organization: organization\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "eacd64c8e4844be5"
            ]
        ]
    },
    {
        "id": "9b103e3f30e49e8d",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1070,
        "y": 540,
        "wires": []
    },
    {
        "id": "eacd64c8e4844be5",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1210,
        "y": 460,
        "wires": []
    },
    {
        "id": "2e0619425460a3d3",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 675,
        "y": 500,
        "wires": [
            [
                "cd60ed703e819022"
            ]
        ],
        "l": false
    },
    {
        "id": "4fa2ca320785a2e4",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "Get Organization by ID",
        "url": "/organizations/:org_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "abfcdd74d9498979"
            ]
        ]
    },
    {
        "id": "5a7ada1f4c09f766",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1260,
        "y": 1860,
        "wires": []
    },
    {
        "id": "b374cb0fea6b3897",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 1820,
        "wires": [
            [
                "c2478e40eca32f8d"
            ],
            [
                "5a7ada1f4c09f766"
            ]
        ]
    },
    {
        "id": "c2478e40eca32f8d",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1260,
        "y": 1780,
        "wires": []
    },
    {
        "id": "0ca2e856aba81c1d",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "Prepare SQL Query",
        "func": "// Extract query parameters\nconst skip = parseInt(msg.req.query.skip) || 0;  // Default to 0 if not provided\nconst limit = parseInt(msg.req.query.limit) || 50;  // Default to 50 if not provided\n\n// Validate skip and limit\nif (isNaN(skip) || skip < 0) {\n    node.error('Invalid skip parameter', msg);\n    return null;\n}\n\nif (isNaN(limit) || limit <= 0) {\n    node.error('Invalid limit parameter', msg);\n    return null;\n}\n\nmsg.query = \"SELECT * FROM activities LIMIT $1 OFFSET $2\";\nmsg.params = [\n    limit,\n    skip\n];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1820,
        "wires": [
            [
                "aef9c751fd89b4db"
            ]
        ]
    },
    {
        "id": "a507e8ae8429cd78",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "List Activities",
        "url": "/activities",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1820,
        "wires": [
            [
                "06527b6a60f2adfb"
            ]
        ]
    },
    {
        "id": "aef9c751fd89b4db",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 855,
        "y": 1820,
        "wires": [
            [
                "b374cb0fea6b3897"
            ]
        ],
        "l": false
    },
    {
        "id": "238b583f038c7769",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "Create Activity",
        "url": "/activities",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1980,
        "wires": [
            [
                "773d749297e54a80"
            ]
        ]
    },
    {
        "id": "f5b74102881341fa",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "Prepare SQL Insert",
        "func": "const { \n    activity_name, \n    activity_desc, \n    activity_xp, \n    activity_credit, \n    activity_type, \n    activity_startdate, \n    activity_enddate, \n    activity_owner, \n    activity_org, \n    skills_id, \n    sdg_id \n} = msg.payload;\n\n// Validation\nif (!activity_name || typeof activity_name !== 'string' || activity_name.trim() === '') {\n    node.error('Missing or invalid activity_name', msg);\n    return null;\n}\n\nif (!activity_type || typeof activity_type !== 'string' || activity_type.trim() === '') {\n    node.error('Missing or invalid activity_type', msg);\n    return null;\n}\n\nif (!activity_xp || typeof activity_xp !== 'number') {\n    node.error('Missing or invalid activity_xp', msg);\n    return null;\n}\n\nif (!activity_credit || typeof activity_credit !== 'number') {\n    node.error('Missing or invalid activity_credit', msg);\n    return null;\n}\n\nif (!activity_owner || !/^[0-9a-fA-F-]{36}$/.test(activity_owner)) {\n    node.error('Missing or invalid activity_owner (UUID)', msg);\n    return null;\n}\n\nif (!activity_org || !/^[0-9a-fA-F-]{36}$/.test(activity_org)) {\n    node.error('Missing or invalid activity_org (UUID)', msg);\n    return null;\n}\n\n// Use current timestamp if activity_startdate is not provided\nconst start_date = activity_startdate || new Date().toISOString();\n\n// Prepare SQL\nmsg.query = `\n    INSERT INTO activities (\n        activity_name, \n        activity_desc, \n        activity_xp, \n        activity_credit, \n        activity_type, \n        activity_startdate, \n        activity_enddate, \n        activity_owner, \n        activity_org, \n        skills_id, \n        sdg_id\n    ) \n    VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11\n    ) \n    RETURNING *;\n`;\n\nmsg.params = [\n    activity_name, \n    activity_desc || null, \n    activity_xp, \n    activity_credit, \n    activity_type, \n    start_date, \n    activity_enddate || null, \n    activity_owner, \n    activity_org, \n    skills_id || null, \n    sdg_id || null\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1980,
        "wires": [
            [
                "307e56627f59548e"
            ]
        ]
    },
    {
        "id": "307e56627f59548e",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 845,
        "y": 1980,
        "wires": [
            [
                "bf2f9e68553ccb75"
            ]
        ],
        "l": false
    },
    {
        "id": "bf2f9e68553ccb75",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1980,
        "wires": [
            [
                "bc531713bb82c1d0"
            ],
            [
                "18a014b66159eb6f"
            ]
        ]
    },
    {
        "id": "ed2d2dc8c080fab8",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "201 Created",
        "statusCode": "201",
        "headers": {},
        "x": 1290,
        "y": 1960,
        "wires": []
    },
    {
        "id": "18a014b66159eb6f",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1240,
        "y": 2020,
        "wires": []
    },
    {
        "id": "bc531713bb82c1d0",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "resp",
        "func": "// Extract the member ID from the database query result\nconst createdActivity = msg.payload[0]; // Assuming the result is in the first element of the array\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Activity has been successfully created\",\n    activity_id: createdActivity.activity_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1960,
        "wires": [
            [
                "ed2d2dc8c080fab8"
            ]
        ]
    },
    {
        "id": "b019c1b471ba4625",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "Prepare SQL Query",
        "func": "const activity_id = msg.req.params.activity_id;\n\n// Prepare SQL to get the member without the password\nmsg.query = `\n    SELECT \n        *\n    FROM \n        activities\n    WHERE \n        activity_id = $1\n`;\n\nmsg.params = [activity_id];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2160,
        "wires": [
            [
                "36a435dd5284487f"
            ]
        ]
    },
    {
        "id": "1b1493fa8a5b9912",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 2160,
        "wires": [
            [
                "45582769dbee1f97"
            ],
            [
                "98680c88a7e3bbb2"
            ]
        ]
    },
    {
        "id": "45582769dbee1f97",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst activity = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Activity found\",\n    activity: activity\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 2120,
        "wires": [
            [
                "85a14efd439eb0a3"
            ]
        ]
    },
    {
        "id": "98680c88a7e3bbb2",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1260,
        "y": 2200,
        "wires": []
    },
    {
        "id": "85a14efd439eb0a3",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1400,
        "y": 2120,
        "wires": []
    },
    {
        "id": "36a435dd5284487f",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 855,
        "y": 2160,
        "wires": [
            [
                "1b1493fa8a5b9912"
            ]
        ],
        "l": false
    },
    {
        "id": "aac726b02e5b233f",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "Get Activity by ID",
        "url": "/activities/:activity_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2160,
        "wires": [
            [
                "3ec8d3f7f2a966a4"
            ]
        ]
    },
    {
        "id": "1",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "Login",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1410,
        "y": 240,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "2",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "Prepare SQL Query",
        "func": "const { member_email, member_password } = msg.payload;\n\n// Prepare the SQL query to verify the password using crypt()\nmsg.query = `SELECT member_id, member_password FROM members WHERE member_email = $1 AND member_password = crypt($2, member_password)`\nmsg.params = [member_email, member_password]\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 240,
        "wires": [
            [
                "f59ee31030a28138"
            ]
        ]
    },
    {
        "id": "4",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "Generate JWT",
        "func": "if (msg.payload.length === 0) {\n    msg.statusCode = 401;\n    node.error('Unauthorized: Invalid email or password', msg);\n    return null;\n}\n\nconst jwt = global.get('jsonwebtoken');\n\nconst user = msg.payload[0];\n\n// Query to get the user's role\nmsg.query = `SELECT r.role_name FROM roles r JOIN member_roles mr ON r.role_id = mr.role_id WHERE mr.member_id = $1`\nmsg.params = [user.member_id]\nmsg.user_id = user.member_id;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 240,
        "wires": [
            [
                "91763faa8f876344"
            ]
        ]
    },
    {
        "id": "6",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "Sign JWT",
        "func": "const jwt = global.get('jsonwebtoken');\n\n//const role = msg.payload.length > 0 ? msg.payload[0].role_name : null;\nconst role = msg.payload.length > 0 ? msg.payload : null;\n\nmsg.payload = jwt.sign({ member_id: msg.user_id, role }, 'your-secret-key', { expiresIn: '1h' });\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 240,
        "wires": [
            [
                "7"
            ]
        ]
    },
    {
        "id": "7",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "Send JWT",
        "statusCode": "",
        "headers": {},
        "x": 2190,
        "y": 240,
        "wires": []
    },
    {
        "id": "91763faa8f876344",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1935,
        "y": 240,
        "wires": [
            [
                "6"
            ]
        ],
        "l": false
    },
    {
        "id": "f59ee31030a28138",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ed79720e50c3c5aa",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1695,
        "y": 240,
        "wires": [
            [
                "4"
            ]
        ],
        "l": false
    },
    {
        "id": "4f932c4991bce055",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "401 Unauthorized",
        "statusCode": "401",
        "headers": {},
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "81c7faff4cb614fd",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "14a048fb108bd56c",
        "name": "Check Error Code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "4f932c4991bce055"
            ],
            [
                "5d2c72d4.7c8dec"
            ]
        ]
    },
    {
        "id": "1c03ca4d05a7267c",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "",
        "x": 340,
        "y": 340,
        "wires": [
            [
                "e338455bad8a47c6"
            ]
        ]
    },
    {
        "id": "abfcdd74d9498979",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "05b8ed53065a8cd1",
        "name": "",
        "x": 360,
        "y": 500,
        "wires": [
            [
                "aeaf33e6aaa4f214"
            ]
        ]
    },
    {
        "id": "5daa9143b83d6644",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "",
        "x": 340,
        "y": 660,
        "wires": [
            [
                "6954bcca671f3ab5"
            ]
        ]
    },
    {
        "id": "6954bcca671f3ab5",
        "type": "subflow:880ae79f14619c5d",
        "z": "dbab6edfda7971c1",
        "g": "383b1f1fa33c8505",
        "name": "",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "63739fed659fe368"
            ]
        ]
    },
    {
        "id": "a44c078fe6fa21d3",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "",
        "x": 320,
        "y": 840,
        "wires": [
            [
                "083f6f43ae863331"
            ]
        ]
    },
    {
        "id": "4ffb7cc971eb13e8",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "2d9b645b715b3674",
        "name": "",
        "x": 360,
        "y": 1220,
        "wires": [
            [
                "4e6ae77d45269344"
            ]
        ]
    },
    {
        "id": "7a611a120c3cf5a7",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "PSQL get member Role",
        "func": "msg.member_id = msg.payload[0].member_id\n\n// Prepare SQL\nmsg.query = `SELECT role_id FROM roles WHERE role_name = $1;`;\nmsg.params = ['member']\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1020,
        "wires": [
            [
                "d56cb3323c3a56e5"
            ]
        ]
    },
    {
        "id": "d56cb3323c3a56e5",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1345,
        "y": 1020,
        "wires": [
            [
                "4b96dbd38e612725"
            ]
        ],
        "l": false
    },
    {
        "id": "67478bbf2dddb2b7",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "PSQL Check if exists",
        "func": "msg.newmember = msg.payload\nconst { \n    member_email\n} = msg.payload;\n\n\nif (!member_email || typeof member_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member_email)) {\n    node.error('Missing or invalid member_email', msg);\n    return null;\n}\n\n// Prepare SQL\nmsg.query = `\n    SELECT member_id\n    FROM members\n    WHERE member_email = $1;\n`;\n\nmsg.params = [member_email];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "56b0520943f83b20"
            ]
        ]
    },
    {
        "id": "56b0520943f83b20",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 525,
        "y": 1040,
        "wires": [
            [
                "a8d159671889b121"
            ]
        ],
        "l": false
    },
    {
        "id": "a8d159671889b121",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 575,
        "y": 1040,
        "wires": [
            [
                "92b39ec92961af98"
            ],
            [
                "3b321b9933e736a3"
            ]
        ],
        "l": false
    },
    {
        "id": "3b321b9933e736a3",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "409 Conflict",
        "statusCode": "409",
        "headers": {},
        "x": 710,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1bc22e46e42f09f4",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "PSQL Insert member role",
        "func": "var role_id = msg.payload[0].role_id\n// Prepare SQL\nmsg.query = `INSERT INTO member_roles (\n    role_id,\n    member_id\n) VALUES ( $1, $2)\nRETURNING *;`;\n\nmsg.params = [role_id,msg.member_id]\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1020,
        "wires": [
            [
                "1f53358b748a2053"
            ]
        ]
    },
    {
        "id": "a6b4245d22ee9cef",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1040,
        "wires": [
            [
                "7a611a120c3cf5a7"
            ],
            [
                "20b0454a4cd033d6"
            ]
        ]
    },
    {
        "id": "4b96dbd38e612725",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1500,
        "y": 1020,
        "wires": [
            [
                "1bc22e46e42f09f4"
            ],
            [
                "831acb19d938a2b4"
            ]
        ]
    },
    {
        "id": "831acb19d938a2b4",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1720,
        "y": 1060,
        "wires": []
    },
    {
        "id": "20b0454a4cd033d6",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1170,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1f53358b748a2053",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "ba352a33ad13b2d1",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1895,
        "y": 1020,
        "wires": [
            [
                "a5b57367463c4ecf"
            ]
        ],
        "l": false
    },
    {
        "id": "a18fada39e5856bb",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Prepare SQL Query",
        "func": "const member_id = msg.req.params.member_id;\n\n// Prepare SQL to get the member without the password\nmsg.query = `\n    SELECT \n        *\n    FROM \n        members\n    WHERE \n        member_id = $1\n`;\n\nmsg.params = [member_id];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1400,
        "wires": [
            [
                "6e6299c02a5c9fa9"
            ]
        ]
    },
    {
        "id": "809a00406fc68fd0",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "a69fa02be399df48"
            ],
            [
                "12f0731055ed70ce"
            ]
        ]
    },
    {
        "id": "a69fa02be399df48",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst member = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member found\",\n    member: member\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1360,
        "wires": [
            [
                "dd90a9d2d460e1d5"
            ]
        ]
    },
    {
        "id": "12f0731055ed70ce",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1090,
        "y": 1440,
        "wires": []
    },
    {
        "id": "dd90a9d2d460e1d5",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1230,
        "y": 1360,
        "wires": []
    },
    {
        "id": "6e6299c02a5c9fa9",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 695,
        "y": 1400,
        "wires": [
            [
                "809a00406fc68fd0"
            ]
        ],
        "l": false
    },
    {
        "id": "6f49aed723f6683e",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Get Member by ID",
        "url": "/member/private/:member_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1360,
        "wires": [
            [
                "a64c0842ee32a3f8"
            ]
        ]
    },
    {
        "id": "a64c0842ee32a3f8",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "",
        "x": 360,
        "y": 1360,
        "wires": [
            [
                "3dbce8cf909fc75b"
            ]
        ]
    },
    {
        "id": "3dbce8cf909fc75b",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Check access",
        "func": "console.log(msg.user.member_id)\nconsole.log(msg.req.params.member_id)\nif((msg.user.role !== 'admin') && (msg.user.member_id !== msg.req.params.member_id)){\n    msg.statusCode = 403;\n    msg.payload = { error: \"Forbidden: Only members with 'admin' role or the owner can get those info\" };\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1360,
        "wires": [
            [
                "a18fada39e5856bb"
            ],
            [
                "0641024d2baa6972"
            ]
        ]
    },
    {
        "id": "0641024d2baa6972",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "0c3cf55a6354c68b",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 1360,
        "wires": []
    },
    {
        "id": "06527b6a60f2adfb",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "",
        "x": 340,
        "y": 1820,
        "wires": [
            [
                "35083f92f80d197f"
            ]
        ]
    },
    {
        "id": "083f6f43ae863331",
        "type": "subflow:84b08c8e5dbc93fb",
        "z": "dbab6edfda7971c1",
        "g": "aad75d5c826ca0b1",
        "name": "",
        "x": 510,
        "y": 840,
        "wires": [
            [
                "9e9d7e60.87b97"
            ]
        ]
    },
    {
        "id": "e338455bad8a47c6",
        "type": "subflow:84b08c8e5dbc93fb",
        "z": "dbab6edfda7971c1",
        "g": "5e64576d309c62f9",
        "name": "",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "fb2c076c83639249"
            ]
        ]
    },
    {
        "id": "773d749297e54a80",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "",
        "x": 360,
        "y": 1980,
        "wires": [
            [
                "2c1a6fd5171b3b59"
            ]
        ]
    },
    {
        "id": "2c1a6fd5171b3b59",
        "type": "subflow:880ae79f14619c5d",
        "z": "dbab6edfda7971c1",
        "g": "4e3f58172aca87d0",
        "name": "",
        "x": 530,
        "y": 1980,
        "wires": [
            [
                "f5b74102881341fa"
            ]
        ]
    },
    {
        "id": "3ec8d3f7f2a966a4",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "",
        "x": 360,
        "y": 2160,
        "wires": [
            [
                "31ab2ada5a324f3a"
            ]
        ]
    },
    {
        "id": "31ab2ada5a324f3a",
        "type": "subflow:84b08c8e5dbc93fb",
        "z": "dbab6edfda7971c1",
        "g": "aefbdd2e49c81e3f",
        "name": "",
        "x": 530,
        "y": 2160,
        "wires": [
            [
                "b019c1b471ba4625"
            ]
        ]
    },
    {
        "id": "35083f92f80d197f",
        "type": "subflow:84b08c8e5dbc93fb",
        "z": "dbab6edfda7971c1",
        "g": "2b91f5927dfc193f",
        "name": "",
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "0ca2e856aba81c1d"
            ]
        ]
    },
    {
        "id": "3b3e9dc44a7c6a77",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "d": true,
        "g": "5a0547259b4b944c",
        "name": "Prepare SQL Query",
        "func": "const { \n    activity_name, \n    activity_desc, \n    activity_xp, \n    activity_credit, \n    activity_type, \n    activity_startdate, \n    activity_enddate, \n    activity_owner, \n    activity_org, \n    skills_id, \n    sdg_id \n} = msg.payload;\n\n// Validation\nif (!activity_name || typeof activity_name !== 'string' || activity_name.trim() === '') {\n    node.error('Missing or invalid activity_name', msg);\n    return null;\n}\n\nif (!activity_type || typeof activity_type !== 'string' || activity_type.trim() === '') {\n    node.error('Missing or invalid activity_type', msg);\n    return null;\n}\n\nif (!activity_xp || typeof activity_xp !== 'number') {\n    node.error('Missing or invalid activity_xp', msg);\n    return null;\n}\n\nif (!activity_credit || typeof activity_credit !== 'number') {\n    node.error('Missing or invalid activity_credit', msg);\n    return null;\n}\n\nif (!activity_owner || !/^[0-9a-fA-F-]{36}$/.test(activity_owner)) {\n    node.error('Missing or invalid activity_owner (UUID)', msg);\n    return null;\n}\n\nif (!activity_org || !/^[0-9a-fA-F-]{36}$/.test(activity_org)) {\n    node.error('Missing or invalid activity_org (UUID)', msg);\n    return null;\n}\n\n// Use current timestamp if activity_startdate is not provided\nconst start_date = activity_startdate || new Date().toISOString();\n\n// Prepare SQL\nmsg.query = `\n    INSERT INTO activities (\n        activity_name, \n        activity_desc, \n        activity_xp, \n        activity_credit, \n        activity_type, \n        activity_startdate, \n        activity_enddate, \n        activity_owner, \n        activity_org, \n        skills_id, \n        sdg_id\n    ) \n    VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11\n    ) \n    RETURNING *;\n`;\n\nmsg.params = [\n    activity_name, \n    activity_desc || null, \n    activity_xp, \n    activity_credit, \n    activity_type, \n    start_date, \n    activity_enddate || null, \n    activity_owner, \n    activity_org, \n    skills_id || null, \n    sdg_id || null\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2340,
        "wires": [
            [
                "22fd5f8992199711"
            ]
        ]
    },
    {
        "id": "0b4c5f339010e936",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "Check Query Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 2340,
        "wires": [
            [
                "03095899b605f037"
            ],
            [
                "399ae07379df565f"
            ]
        ]
    },
    {
        "id": "03095899b605f037",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "Format Response",
        "func": "// Extract the member data from the query result\nconst activity = msg.payload[0];\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Activity found\",\n    activity: activity\n};\n\n// Set the response status code\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 2300,
        "wires": [
            [
                "cfee23617ff5e557"
            ]
        ]
    },
    {
        "id": "399ae07379df565f",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1260,
        "y": 2380,
        "wires": []
    },
    {
        "id": "cfee23617ff5e557",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1400,
        "y": 2300,
        "wires": []
    },
    {
        "id": "22fd5f8992199711",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 855,
        "y": 2340,
        "wires": [
            [
                "0b4c5f339010e936"
            ]
        ],
        "l": false
    },
    {
        "id": "e2460e7e0c4be608",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "Apply to activity",
        "url": "/activities/apply/:activity_id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2340,
        "wires": [
            [
                "e5734a3238d892fb"
            ]
        ]
    },
    {
        "id": "e5734a3238d892fb",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "",
        "x": 360,
        "y": 2340,
        "wires": [
            [
                "eb9feefa75040452"
            ]
        ]
    },
    {
        "id": "eb9feefa75040452",
        "type": "subflow:84b08c8e5dbc93fb",
        "z": "dbab6edfda7971c1",
        "g": "5a0547259b4b944c",
        "name": "",
        "x": 530,
        "y": 2340,
        "wires": [
            [
                "3b3e9dc44a7c6a77"
            ]
        ]
    },
    {
        "id": "6b0c9df1c7ee1dce",
        "type": "http in",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "Update Member",
        "url": "/members/:member_id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1600,
        "wires": [
            [
                "9813d77d28293b73"
            ]
        ]
    },
    {
        "id": "8110795bc64320e3",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "PSQL Update Member",
        "func": "const member_id = msg.payload[0].member_id;\nconst { \n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture, \n    member_languages, \n    member_summary, \n    country_id, \n    member_password, \n    skill_id \n} = msg.member;\n\n// Validation\nif (!member_firstname || typeof member_firstname !== 'string' || member_firstname.trim() === '') {\n    node.error('Missing or invalid member_firstname', msg);\n    return null;\n}\n\nif (!member_lastname || typeof member_lastname !== 'string' || member_lastname.trim() === '') {\n    node.error('Missing or invalid member_lastname', msg);\n    return null;\n}\n\nif (!member_email || typeof member_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member_email)) {\n    node.error('Missing or invalid member_email', msg);\n    return null;\n}\n\nif (!member_password || typeof member_password !== 'string' || member_password.trim() === '') {\n    node.error('Missing or invalid member_password', msg);\n    return null;\n}\n\n\n// Convert member_languages array to PostgreSQL array literal format\nconst formatted_languages = `{${member_languages.join(',')}}`;\n\n// Prepare SQL\nmsg.query = `\n    UPDATE members \n    SET\n        member_firstname = $1, \n        member_lastname = $2, \n        member_email = $3, \n        member_picture = $4, \n        member_languages = $5, \n        member_summary = $6, \n        country_id = $7, \n        member_password = $8, \n        skill_id = $9\n    WHERE member_id = $10\n    RETURNING *;\n`;\n\nmsg.params = [\n    member_firstname, \n    member_lastname, \n    member_email, \n    member_picture || null, \n    formatted_languages, \n    member_summary, \n    country_id || null, \n    member_password, \n    skill_id || null,\n    member_id\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1600,
        "wires": [
            [
                "694b2e4518918768"
            ]
        ]
    },
    {
        "id": "694b2e4518918768",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1255,
        "y": 1600,
        "wires": [
            [
                "3fedc1bd3a0da237"
            ]
        ],
        "l": false
    },
    {
        "id": "1d4824f0f1daec6c",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "201 Updated",
        "statusCode": "201",
        "headers": {},
        "x": 1690,
        "y": 1580,
        "wires": []
    },
    {
        "id": "633962cfc38dfcc8",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "resp",
        "func": "// Extract the member ID from the database query result\nconst createdMember = msg.payload[0]; // Assuming the result is in the first element of the array\n\n// Prepare the response message\nmsg.payload = {\n    message: \"Member has been successfully updated\",\n    member_id: createdMember.member_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1580,
        "wires": [
            [
                "1d4824f0f1daec6c"
            ]
        ]
    },
    {
        "id": "20d5cd7713e05a40",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "PSQL Check if exists",
        "func": "msg.member = msg.payload\nconst { \n    member_email\n} = msg.payload;\n\n\nif (!member_email || typeof member_email !== 'string' || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member_email)) {\n    node.error('Missing or invalid member_email', msg);\n    return null;\n}\n\n// Prepare SQL\nmsg.query = `\n    SELECT member_id\n    FROM members\n    WHERE member_email = $1;\n`;\n\nmsg.params = [member_email];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1600,
        "wires": [
            [
                "1c841b9718cfb1a3"
            ]
        ]
    },
    {
        "id": "1c841b9718cfb1a3",
        "type": "postgresql",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "cf1453eb80b45c35",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 925,
        "y": 1600,
        "wires": [
            [
                "af94c79376d8504f"
            ]
        ],
        "l": false
    },
    {
        "id": "af94c79376d8504f",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 975,
        "y": 1600,
        "wires": [
            [
                "8110795bc64320e3"
            ],
            [
                "9c73712dd6014031"
            ]
        ],
        "l": false
    },
    {
        "id": "3fedc1bd3a0da237",
        "type": "switch",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "Check Insert Result",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 1600,
        "wires": [
            [
                "633962cfc38dfcc8"
            ],
            [
                "7fe4a3b20b4c9f24"
            ]
        ]
    },
    {
        "id": "7fe4a3b20b4c9f24",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 1570,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9c73712dd6014031",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "404 Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 1100,
        "y": 1640,
        "wires": []
    },
    {
        "id": "87e3519ad243592b",
        "type": "http response",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "Send Error",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 1640,
        "wires": []
    },
    {
        "id": "367d7037f8f7e71d",
        "type": "function",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "Check access",
        "func": "console.log(msg.user.member_id)\nconsole.log(msg.req.params.member_id)\nif((msg.user.role !== 'admin') && (msg.user.member_id !== msg.req.params.member_id)){\n    msg.statusCode = 403;\n    msg.payload = { error: \"Forbidden: Only members with 'admin' role or the owner can update those info\" };\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1600,
        "wires": [
            [
                "20d5cd7713e05a40"
            ],
            [
                "87e3519ad243592b"
            ]
        ]
    },
    {
        "id": "9813d77d28293b73",
        "type": "subflow:803db7b38fcbf7c9",
        "z": "dbab6edfda7971c1",
        "g": "083ef5064dfa9c6f",
        "name": "",
        "x": 360,
        "y": 1600,
        "wires": [
            [
                "367d7037f8f7e71d"
            ]
        ]
    }
]